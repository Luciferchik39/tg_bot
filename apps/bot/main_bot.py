import telebot
import logging
from telebot.async_telebot import AsyncTeleBot
from django.conf import settings
from telebot import types
from tg_bot.services.database.bot_user_uoc import update_or_create_tg_user, \
    user_find
from tg_bot.services.database.create_and_add_ticket import \
    create_and_add_ticket, add_ticket_pass_ticket

bot = AsyncTeleBot(settings.TOKEN_BOT, parse_mode='HTML')

telebot.logger.setLevel(settings.LOG)

logger = logging.getLogger(__name__)



# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
async def send_welcome(message):
    key_bord = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton(text='+1 —Ä–µ—à—ë–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç –≤ –∫–æ–ø–∏–ª–∫—É')
    btn2 = types.KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    btn3 = types.KeyboardButton(text='–ò–Ω—Ñ–æ')
    key_bord.add(btn1, btn2, btn3)


    telegram_id = message.json['from']['id']
    first_name = message.json['from']['first_name']
    last_name = message.json['from']['last_name']
    full_name = f'{first_name} {last_name}'
    username = message.json['from']['username']
    object_user = {'id':telegram_id,
                   'full_name':full_name,
                   'username':username,
                   }

    try:
        await update_or_create_tg_user(object_user)
    except Exception as err:
        logger.info(f'–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ user –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ {err}')
    text = '–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è :)'
    await bot.reply_to(message, text, reply_markup=key_bord)



def work(message):
    return 'https://supchat.taxi.yandex-team' in message.text

@bot.message_handler(func= work)
async def start(message):
    try:
        user_pk = await user_find(message.json['from']['id'])
    except Exception as err:
        logger.info(f'–ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —é–∑–µ—Ä–∞ –≤ –ë–î {err}')
        await bot.send_message(message.chat.id, message.json['text'])
    first_name = message.json['from']['first_name']
    last_name = message.json['from']['last_name']
    full_name = f'{first_name} {last_name}'
    id_ticket = message.json['text']
    object_ticket = {'id_ticket': id_ticket,
                   'full_name': full_name,
                     'user_pk': user_pk
                     }
    try:
        b = await create_and_add_ticket(object_ticket)
        if b:
            await bot.send_message(message.chat.id, text='–¢–∏–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω üéâ')
        else:
            await bot.send_message(message.chat.id, text='—ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç —Ç—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª –±—Ä–æ ü•¥')
    except Exception as err:
        logger.info(f'–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–∫–µ—Ç–∞ {err}')
        await bot.send_message(message.chat.id, message.json['text'])

def add_tick(message):
    return '+1 —Ä–µ—à—ë–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç –≤ –∫–æ–ø–∏–ª–∫—É' in message.text
@bot.message_handler(func=add_tick)
async def add_ticket(message):
    try:
        user_pk = await user_find(message.json['from']['id'])
    except Exception as err:
        logger.info(f'–ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —é–∑–µ—Ä–∞ –≤ –ë–î {err}')
        await bot.send_message(message.chat.id, message.json['text'])
    first_name = message.json['from']['first_name']
    last_name = message.json['from']['last_name']
    full_name = f'{first_name} {last_name}'
    id_ticket = 'Pass'
    object_ticket = {'id_ticket': id_ticket,
                     'full_name': full_name,
                     'user_pk': user_pk
                     }
    try:
        b = await add_ticket_pass_ticket(object_ticket)
        if b:
            await bot.send_message(message.chat.id, text='–¢–∏–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω üéâ')
    except Exception as err:
        logger.info(f'–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–∏–∫–µ—Ç–∞ {err}')
        await bot.send_message(message.chat.id, message.json['text'])

# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    await bot.reply_to(message, message.text)